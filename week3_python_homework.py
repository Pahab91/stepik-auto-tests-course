'''Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:
Требуется реализовать только функцию, решение не должно осуществлять операций ввода-вывода.'''
# def f(x):
#     if x <= -2:
#         return 1 - (x + 2) ** 2
#
#     elif -2 < x <= 2:
#         return -(x / 2)
#
#     elif x > 2:
#         return (x - 2) ** 2 + 1


'''Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения,
 а чётные нацело делит на два. Функция не должна ничего возвращать, 
 требуется только изменение переданного списка, например:
lst = [1, 2, 3, 4, 5, 6]
print(modify_list(lst))  # None
print(lst)               # [1, 2, 3]
modify_list(lst)
print(lst)               # [1]
lst = [10, 5, 8, 3]
modify_list(lst)
print(lst)               # [5, 4]
Функция не должна осуществлять ввод/вывод информации.'''

# def modify_list(l):
#     for i in range(len(l) - 1, -1, - 1):
#         if l[i] % 2 == 1:
#             l.pop(i)
#         else:
#             l[i] = int(l[i] / 2)


'''Напишите функцию update_dictionary(d, key, value), 
которая принимает на вход словарь dd и два числа: keykey и valuevalue.
Если ключ keykey есть в словаре dd, то добавьте значение valuevalue в список, который хранится по этому ключу.
Если ключа keykey нет в словаре, то нужно добавить значение в список по ключу 2 * key2∗key. 
Если и ключа 2 * key2∗key нет, то нужно добавить ключ 2 * key2∗key в словарь и 
сопоставить ему список из переданного элемента [value][value].
Требуется реализовать только эту функцию, кода вне её не должно быть.
Функция не должна вызывать внутри себя функции input и print.'''

# def update_dictionary(d, key, value):
#     if key in d:
#         d[key].append(value)
#     elif 2 * key in d:
#         d[2 * key].append(value)
#     else:
#         d[2 * key] = []
#         d[2 * key].append(value)
#
#
# d = {}
# print(update_dictionary(d, 1, -1))  # None
# print(d)  # {2: [-1]}
# update_dictionary(d, 2, -2)
# print(d)  # {2: [-1, -2]}
# update_dictionary(d, 1, -3)
# print(d)  # {2: [-1, -2, -3]}


'''Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и 
вывести получившуюся статистику.
Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке 
число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только один раз.'''

# s = input().lower().split()
# d = {}
# for x in s:
#     d[x] = s.count(x)
# for key, value in d.items():
#     print(key, value)

'''Напишите программу, которая считывает строку с числом nn, которое задаёт количество чисел, которые нужно считать. 
Далее считывает nn строк с числами x_ix 
i, по одному числу в каждой строке. Итого будет n+1n+1 строк.
При считывании числа x_ix 
i программа должна на отдельной строке вывести значение f(x_i)f(x 
i). Функция f(x) уже реализована и доступна для вызова. 
Функция вычисляется достаточно долго и зависит только от переданного аргумента xx. 
Для того, чтобы уложиться в ограничение по времени, нужно избежать повторного вычисления значений.'''

# def f(x):
#     return x*2
#
#
# d = {}
# n = int(input())
# for i in range(n):
#     xi = int(input())
#     if xi in d:
#         print(d[xi])
#     else:
#         d[xi] = f(xi)
#         print(d[xi])


'''Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью 
кодирования повторов, и производит обратную операцию, получая исходный текст.
Запишите полученный текст в файл и прикрепите его, как ответ на это задание.
В исходном тексте не встречаются цифры, так что код однозначно интерпретируем.
Примечание. Это первое задание типа Dataset Quiz. 
В таких заданиях после нажатия "Start Quiz" у вас появляется ссылка "download your dataset". 
Используйте эту ссылку для того, чтобы загрузить файл со входными данными к себе на компьютер. 
Запустите вашу программу, используя этот файл в качестве входных данных. 
Выходной файл, который при этом у вас получится, надо отправить в качестве ответа на эту задачу.'''

# with open(str(input())) as inf:
#     s1 = inf.readline()
# n = ''
# s4 = ''
# s2 = s1[0]
# for i in range(1, len(s1)):
#     if s1[i].isdigit() is True:
#         n = str(n + s1[i])
#         if i == len(s1) - 1:
#             s4 = s4 + s2 * int(n)
#     else:
#         s3 = s2 * int(n)
#         s2 = s1[i]
#         n = ''
#         s4 = s4 + s3
# with open('text.txt', 'w') as ouf:
#     ouf.write(s4)


'''Недавно мы считали для каждого слова количество его вхождений в строку. 
Но на все слова может быть не так интересно смотреть, как, например, на наиболее часто используемые.
Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) 
и выводит самое частое слово в этом тексте и через пробел то, сколько раз оно встретилось. 
Если таких слов несколько, вывести лексикографически первое (можно использовать оператор < для строк).
В качестве ответа укажите вывод программы, а не саму программу.
Слова, написанные в разных регистрах, считаются одинаковыми.'''

# s1 = ''
# with open(str('dataset_3363_3.txt')) as inf:
#     for line in inf:
#         line = line.strip()
#         s1 = s1 + line
# print(s1)
# s2 = s1.lower()
# a = s2.split(' ')
# print('тест СПИСОК', a)
# a.sort()
# print(a)
# m = 0
# k = ''
# for i in a:
#     n = a.count(i)
#     if n > m:
#         m = n
#         k = i
# print(k, ' ', m)
#
# with open('text.txt', 'w') as ouf:
#     ouf.write(k + ' ' + str(m))


'''Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, 
где в каждой строке записана следующая информация:
Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку
Поля внутри строки разделены точкой с запятой, оценки — целые числа.
Напишите программу, которая считывает исходный файл с подобной структурой и для каждого абитуриента записывает 
его среднюю оценку по трём предметам на отдельной строке, соответствующей этому абитуриенту, в файл с ответом.
Также вычислите средние баллы по математике, физике и русскому языку по всем абитуриентам и добавьте полученные 
значения, разделённые пробелом, последней строкой в файл с ответом.
В качестве ответа на задание прикрепите полученный файл со средними оценками по каждому ученику и одной строкой
 со средними оценками по трём предметам.'''

# math = 0
# physics = 0
# russian = 0
# position = 0
# lines = []
# with open(str('dataset_3363_4.txt')) as inf:
#     for line in inf:
#         line = line.strip().split(';')  # стрип убирает /n, а сплит убирает точку с заяпятой, все превращается в список
#         n = (float(line[1]) + float(line[2]) + float(line[3])) / 3
#         position += 1
#         math += float(line[1])
#         physics += float(line[2])
#         russian += float(line[3])
#         lines.append(n)
# math = math/position
# physics = physics/position
# russian = russian/position
# middle = (str(math) + ' ' + str(physics) + ' ' + str(russian))
# lines.append(middle)
# with open('text.txt', 'w') as ouf:
#     for line1 in lines:
#         ouf.writelines(str(line1) + '\n')


'''Напишите программу, которая подключает модуль math и, используя значение числа \piπ из этого модуля, 
находит для переданного ей на стандартный ввод радиуса круга периметр этого круга и выводит его на стандартный вывод.'''

# import math
# radius = float(input())
# print(2*math.pi*radius)


"""Напишите программу, которая запускается из консоли и печатает значения всех переданных аргументов на экран 
(имя скрипта выводить не нужно). Не изменяйте порядок аргументов при выводе.
Для доступа к аргументам командной строки программы подключите модуль sys и 
используйте переменную argv из этого модуля."""

# import sys
# for i in sys.argv:
#     if i == sys.argv[0]:
#         continue
#     else:
#         print(i, end=' ')


'''Скачайте файл. В нём указан адрес другого файла, который нужно скачать с использованием модуля requests и посчитать 
число строк в нём.
Используйте функцию get для получения файла (имеет смысл вызвать метод strip к передаваемому параметру, чтобы убрать 
пробельные символы по краям).
После получения файла вы можете проверить результат, обратившись к полю text. Если результат работы скрипта не 
принимается, проверьте поле url на правильность. 
Для подсчёта количества строк разбейте текст с помощью метода splitlines.
В поле ответа введите одно число или отправьте файл, содержащий одно число.'''

# import requests
# with open(str('dataset_3378_2.txt')) as inf:
#     s1 = inf.readline()
#     s1 = s1.strip()
# r = requests.get(s1)
# #print(r.text)
# s2 = r.text.splitlines()
# print(len(s2))


'''Имеется набор файлов, каждый из которых, кроме последнего, содержит имя следующего файла.
Первое слово в тексте последнего файла: "We".
Скачайте предложенный файл. В нём содержится ссылка на первый файл из этого набора.
Все файлы располагаются в каталоге по адресу:
https://stepic.org/media/attachments/course67/3.6.3/
Загрузите содержимое ﻿последнего файла из набора, как ответ на это задание.'''

# import requests
# with open(str('dataset_3378_3.txt')) as inf:
#     s1 = inf.readline()
#     s1 = s1.strip()
# print(s1)
# s2 = 'https://stepic.org/media/attachments/course67/3.6.3/'
# print(s2)
# r = requests.get(s1)
# print(r.text)
# while not r.text.startswith("We"):
#     r = requests.get(s2 + r.text)
#     print(r.text)


'''Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит 
на стандартный вывод сводную таблицу результатов всех матчей.
За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
Формат ввода следующий:
В первой строке указано целое число nn — количество завершенных игр.
После этого идет nn строк, в которых записаны результаты игры в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой
Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков
Конкретный пример ввода-вывода приведён ниже.
Порядок вывода команд произвольный.'''

# n = int(input())
# d = {}
# for i in range(n):
#     k = input().split(';')
#     if int(k[1]) > int(k[3]):
#         if k[0] in d.keys():
#             d[k[0]][0] += 1
#             d[k[0]][1] += 1
#             d[k[0]][2] += 0
#             d[k[0]][3] += 0
#             d[k[0]][4] += 3
#         if k[0] not in d.keys():
#             d[k[0]] = [1, 1, 0, 0, 3]
#         if k[2] in d.keys():
#             d[k[2]][0] += 1
#             d[k[2]][1] += 0
#             d[k[2]][2] += 0
#             d[k[2]][3] += 1
#             d[k[2]][4] += 0
#         if k[2] not in d.keys():
#             d[k[2]] = [1, 0, 0, 1, 0]
#     elif int(k[1]) < int(k[3]):
#         if k[0] in d.keys():
#             d[k[0]][0] += 1
#             d[k[0]][1] += 0
#             d[k[0]][2] += 0
#             d[k[0]][3] += 1
#             d[k[0]][4] += 0
#         if k[0] not in d.keys():
#             d[k[0]] = [1, 0, 0, 1, 0]
#         if k[2] in d.keys():
#             d[k[2]][0] += 1
#             d[k[2]][1] += 1
#             d[k[2]][2] += 0
#             d[k[2]][3] += 0
#             d[k[2]][4] += 3
#         if k[2] not in d.keys():
#             d[k[2]] = [1, 1, 0, 0, 3]
#     else:
#         if k[0] in d.keys():
#             d[k[0]][0] += 1
#             d[k[0]][1] += 0
#             d[k[0]][2] += 1
#             d[k[0]][3] += 0
#             d[k[0]][4] += 1
#         if k[0] not in d.keys():
#             d[k[0]] = [1, 0, 1, 0, 1]
#         if k[2] in d.keys():
#             d[k[2]][0] += 1
#             d[k[2]][1] += 0
#             d[k[2]][2] += 1
#             d[k[2]][3] += 0
#             d[k[2]][4] += 1
#         if k[2] not in d.keys():
#             d[k[2]] = [1, 0, 1, 0, 1]
# for q, w in d.items():
#     print((q+':'), *w, end='\n')


'''В какой-то момент в Институте биоинформатики биологи перестали понимать, что говорят информатики: 
они говорили каким-то странным набором звуков.
В какой-то момент один из биологов раскрыл секрет информатиков: они использовали при общении подстановочный шифр, т.е. 
заменяли каждый символ исходного сообщения на соответствующий ему другой символ. 
Биологи раздобыли ключ к шифру и теперь нуждаются в помощи:
Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. Программа принимает на вход две строки 
одинаковой длины, на первой строке записаны символы исходного алфавита, на второй строке — символы конечного алфавита, 
после чего идёт строка, которую нужно зашифровать переданным ключом, и ещё одна строка, которую нужно расшифровать.
Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%
Это значит, что символ a исходного сообщения заменяется на символ * в шифре, b заменяется на d, c — на % и d — на #.
Нужно зашифровать строку abacabadaba и расшифровать строку #*%*d*% с помощью этого шифра. Получаем следующие строки, 
которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac'''

# d = {}
# s1 = input()
# s2 = input()
# n = 0
# for i in s1:
#     d[i] = s2[n]
#     n += 1
# s3 = input()
# s4 = input()
# for i in s3:
#     if i in d.keys():
#         print(d.get(i), end='')
# inv_d = {v: k for k, v in d.items()}
# print()
# for i in s4:
#     if i in inv_d.keys():
#         print(inv_d.get(i), end='')


'''Простейшая система проверки орфографии может быть основана на использовании списка известных слов.
Если введённое слово не найдено в этом списке, оно помечается как "ошибка".
Попробуем написать подобную систему.
На вход программе первой строкой передаётся количество dd известных нам слов, после чего на dd строках указываются
 эти слова. Затем передаётся количество ll строк текста для проверки, после чего ll строк текста.
Выведите уникальные "ошибки" в произвольном порядке. Работу производите без учёта регистра.'''

# d = int(input())
# s = []
# for i in range(d):
#     s.append(input())
# s = [x.lower() for x in s]
# s1 = set()
# l = int(input())
# for i in range(l):
#     s2 = input().lower().split(' ')
#     for j in s2:
#         if j not in s:
#             s1.add(j)
# for i in s1:
#     print(i)


'''Группа биологов в институте биоинформатики завела себе черепашку.
После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — это положительное
 расстояние в сантиметрах, которое должна пройти черепашка.
Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно написать программу, 
которая определит, куда в итоге биологи приведут черепашку. Для этого программисты просят вас написать программу, 
которая выведет точку, в которой окажется черепашка после всех команд. Для простоты они решили считать, что движение 
начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.
Программе подаётся на вход число команд nn, которые нужно выполнить черепашке, после чего nn строк с самими командами. 
Вывести нужно два числа в одну строку: первую и вторую координату конечной точки черепашки. 
Все координаты целочисленные.'''

# n = int(input())
# position = [0, 0]
# for i in range(n):
#     s1 = input().split(' ')
#     if s1[0] == 'север':
#         position = [position[0], position[1] + int(s1[1])]
#     if s1[0] == 'юг':
#         position = [position[0], position[1] - int(s1[1])]
#     if s1[0] == 'восток':
#         position = [position[0] + int(s1[1]), position[1]]
#     if s1[0] == 'запад':
#         position = [position[0] - int(s1[1]), position[1]]
# print(*position)


'''Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.
Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.
Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост
Класс обозначается только числом. Буквенные модификаторы не используются. 
Номер класса может быть от 1 до 11 включительно. В фамилии нет пробелов, а в качестве роста используется натуральное 
число, но при подсчёте среднего требуется вычислить значение в виде вещественного числа.
Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого по одиннадцатый). 
Если про какой-то класс нет информации, необходимо вывести напротив него прочерк.
В качестве ответа прикрепите файл с полученными данными о среднем росте.'''

# d = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0}
# d_mid = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0}
# with open(str('dataset_3380_5.txt')) as inf:
#     for line in inf:
#         line = line.split()
#         d[int(line[0])] += float(line[2])
#         d_mid[int(line[0])] += float(1)
# for i in d.keys():
#     if d_mid.get(i) == 0:
#         if d.get(i) == 0:
#             d[i] = '-'
#         continue
#     else:
#         d[i] = d.get(i)/d_mid.get(i)
# with open('text.txt', 'w') as ouf:
#     for key, val in d.items():
#         ouf.write('{} {}\n'.format(key, val))



